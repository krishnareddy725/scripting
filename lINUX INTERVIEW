✅ 1. Scenario: Server Disk Full Suddenly
Question:
A production server suddenly stops responding. You try to SSH but it’s very slow. After logging in, you notice the disk is 100% full. How would you resolve this?

Answer:

df -h
du -sh /* 2>/dev/null | sort -hr | head -10
> /var/log/messages
yum clean all
Explanation:
This scenario is common in production. I follow a structured approach—check space, trace file growth, clean or archive. It shows my awareness of file systems, log management, and system recovery.

✅ 2. Scenario: CPU Usage is High
Question:
A developer reports the application is very slow. You suspect high CPU usage. How do you investigate?

Answer:

top
ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head
systemctl restart <servicename>
Explanation:
I check system metrics using top, ps, and act based on the issue (e.g., looping process). This reflects hands-on troubleshooting and good decision-making in performance issues.

✅ 3. Scenario: Service Fails to Start
Question:
A web service (e.g., Apache) fails to start on boot. How will you troubleshoot?

Answer:

systemctl status httpd
journalctl -xe
apachectl configtest
netstat -tuln | grep :80
Explanation:
I approach this step-by-step: verify the service state, examine logs, validate config, and check port conflicts. It proves structured problem-solving with knowledge of systemd and networking.

✅ 4. Scenario: User Cannot Login via SSH
Question:
A team member cannot SSH into a server. What steps would you take to resolve the issue?

Answer:

systemctl status sshd
id username
passwd -S username
ls -ld ~/.ssh
ls -l ~/.ssh/authorized_keys
tail -f /var/log/secure
Explanation:
This checks for SSH service issues, user account problems, file permissions, and logs. It shows in-depth SSH knowledge and ability to handle real-time access issues securely.

✅ 5. Scenario: Crontab Not Working
Question:
A scheduled backup script in crontab isn’t running. How do you debug it?

Answer:

crontab -l
systemctl status crond
grep CRON /var/log/cron
# Example cron job with logging
0 1 * * * /path/to/script.sh >> /tmp/backup.log 2>&1
Explanation:
I verify cron syntax, service status, and logs. Adding logs to the script helps in debugging silently failing jobs. This shows my command over automation and job scheduling.

✅ 6. Scenario: Permission Denied When Running a Script
Question:
A user runs a shell script but gets a "Permission denied" error. How would you resolve it?

Answer:

ls -l script.sh
chmod +x script.sh
Explanation:
The issue is usually missing execute permission. I use ls -l to verify and chmod +x to fix. This shows basic but critical knowledge of Linux permissions and script execution.

✅ 7. Scenario: Port 80 is Already in Use
Question:
You try to start Apache, but it fails because port 80 is already in use. How do you handle this?

Answer:

netstat -tuln | grep :80
lsof -i :80
kill -9 <PID>  # if safe to stop
Explanation:
This shows the ability to identify conflicting services using netstat and lsof, and the judgment to safely terminate processes. It’s a real-world issue in multi-service environments.

✅ 8. Scenario: Root Password Forgotten
Question:
You have physical access to a Linux machine but forgot the root password. How would you reset it?

Answer:

Reboot the machine.
In GRUB menu, edit the boot entry and add:
init=/bin/bash
Once in shell:
mount -o remount,rw /
passwd root
exec /sbin/init
Explanation:
This is a critical recovery scenario. Shows knowledge of boot process, GRUB, single-user mode, and password recovery—great for proving deep system understanding.

✅ 9. Scenario: Swap Memory is Full
Question:
The system is using too much swap memory and becoming slow. What would you do?

Answer:

free -h
swapon --show
top  # check swap-using processes
swapoff -a
swapon -a
Explanation:
Demonstrates understanding of virtual memory, how to monitor it, and how to clear swap. You might also investigate the need for more RAM or optimize heavy applications.

✅ 10. Scenario: File Deleted Accidentally – Need Recovery
Question:
A critical file was deleted accidentally from the system. Can it be recovered?

Answer:

If it's still open by a process:
lsof | grep deleted
cp /proc/<pid>/fd/<fd> /recovered_file
Otherwise, restore from backup or snapshots (if available).
Explanation:
This scenario shows creative use of /proc and lsof for emergency recovery. It also highlights the importance of having backup policies in place.

✅ 1. Scenario: Find All Failed SSH Login Attempts
Command Used: grep

Question:
You are asked to find all failed SSH login attempts from the logs. How would you do that?

Answer:

grep "Failed password" /var/log/secure
Explanation:
This command filters lines from /var/log/secure that show failed login attempts. It's useful for security auditing and shows understanding of system logs and grep filtering.

✅ 2. Scenario: Get Only IP Addresses from Failed Logins
Command Used: awk

Question:
From the failed SSH login entries, how do you extract just the IP addresses?

Answer:

grep "Failed password" /var/log/secure | awk '{print $11}'
Explanation:
Here, awk is used to print the 11th field (which contains the IP). This scenario shows the power of awk in parsing structured text like log files.

✅ 3. Scenario: Replace a Configuration Parameter in a File
Command Used: sed

Question:
You need to change PermitRootLogin no to PermitRootLogin yes in the ssh config. How would you do it?

Answer:

sed -i 's/^PermitRootLogin no/PermitRootLogin yes/' /etc/ssh/sshd_config
Explanation:
This demonstrates real-world use of sed for in-place editing. It also reflects on secure configuration management, often part of sysadmin and DevOps tasks.

✅ 4. Scenario: Summarize Disk Usage from df -h Output
Command Used: awk

Question:
You want to list all mount points along with their usage percentage. How would you do that?

Answer:

df -h | awk 'NR>1 {print $6, $5}'
Explanation:
awk is used here to skip the header (NR>1) and print mount point (6th field) and usage (5th). This shows how awk can be used to filter and format output quickly.

✅ 5. Scenario: Count Occurrences of a Word in a File
Command Used: grep, wc

Question:
You want to know how many times the word "error" appears in a log file. How?

Answer:

grep -i "error" /var/log/messages | wc -l
Explanation:
Combining grep and wc counts the number of matching lines. Shows effective use of piping and log analysis — something interviewers love to hear.

✅ 1. Scenario: Check if Server Was Recently Rebooted
Command Used: uptime

Question:
How can you check how long a server has been running, or if it was recently rebooted?

Answer:

uptime
Explanation:
The uptime command shows how long the system has been running, number of users, and load averages. Useful in troubleshooting to confirm if a server was rebooted unexpectedly or recently patched.

✅ 2. Scenario: Investigate High Load Averages
Command Used: uptime

Question:
A developer says the server is slow. You suspect high load. How do you confirm it?

Answer:

uptime
Explanation:
The load averages at the end of uptime output indicate the system load in the last 1, 5, and 15 minutes. High values compared to CPU cores can indicate overuse. Interviewers like candidates who can correlate performance issues with load.

✅ 3. Scenario: Check Disk Space on All Mounted Filesystems
Command Used: df

Question:
How do you check disk usage on all file systems in human-readable format?

Answer:

df -h
Explanation:
df -h gives an overview of disk usage in GB/MB. It's essential for detecting full partitions, especially /, /var, or /home. Commonly used in troubleshooting “disk full” errors.

✅ 4. Scenario: Check Which Directory is Taking Up Most Space
Command Used: du

Question:
The /var partition is nearly full. How do you find out which subdirectory is using the most space?

Answer:

du -sh /var/* | sort -hr | head -10
Explanation:
This command summarizes each subdirectory’s size, sorts them in human-readable format, and lists the top 10 largest. Perfect for space audits and finding logs or backups consuming storage.

✅ 5. Scenario: Check Disk Usage of Current Directory Recursively
Command Used: du

Question:
You're inside a directory and want to see size of all subfolders recursively. How do you do that?

Answer:

du -h --max-depth=1
Explanation:
This shows a readable breakdown of folder sizes one level deep. Very helpful when analyzing which folders are growing in size within applications, backups, or user directories.


IMP NOTES
---------
chmod -v 644 file.txt --> what changes done it will show.

vi Editor
---------
:se nu        # Show line numbers
:se nonu      # Hide line numbers
:90           # Go to line 90
/data         # Search for 'data'
dd            # Delete a line
u             # Undo

find Command (Search Files & Directories)
-----------------------------------------
find . -type f -empty                 # Find empty files in current directory
find ~ -type f -empty                # Find empty files in home directory
find /tmp -type f -empty            # Find empty files in /tmp
find . -type d -name <dirName>      # Search directory by name

find . -name deployment.yaml         # Case-sensitive search
find . -iname deployment.yaml        # Case-insensitive search
find . -type f -perm 0777            # Files with 777 permissions

find . -mtime 1                      # Modified exactly 1 day ago
find . -mtime -1                     # Modified less than 1 day ago
find . -mtime +1                     # Modified more than 1 day ago

find ./ -type f -name "*.txt"        # Find all .txt files

sed Command (Stream Editor)
---------------------------
sed 's/unix/linux/' abc.txt          # Replace first occurrence
sed 's/unix/linux/2' abc.txt         # Replace 2nd occurrence
sed 's/unix/linux/g' abc.txt         # Replace all occurrences

sed '3 s/unix/linux/' abc.txt        # Replace on line 3
sed '3 s/am/was/p' sed.txt           # Duplicate replaced line
sed -n 's/am/was/p' sed.txt          # Print only replaced lines

sed '1,3 s/unix/linux/' abc.txt      # Replace in line range
sed '5d' filename.txt                # Delete line 5
sed '3,6d' filename.txt              # Delete lines 3 to 6
sed -n '60,80p' filename             # To display lines 60 to 80 of a file using sed

whereis mkdir -- Use case: Useful when troubleshooting or understanding where commands are stored.
users --- Purpose: Lists currently logged-in users.
date -s "20240617" --- Synchronize time manually in isolated systems.
timedatectl --- Use case: Check timezone and NTP sync status.
du -h Ansible/       # Shows size of each file/folder
du -sh Ansible/      # Shows only the total summary
hostname
hostname -i     # Show only IP address

whatis
------
Purpose: Give a brief description of a command.
whatis ls
whatis mkdir

systemctl and service
---------------------
# List all services
systemctl list-unit-files   # Press 'q' to quit

# Service status
systemctl status sshd

# Start/Stop/Restart
service sshd start
service sshd stop

last
----
last
last -R ec2-user    # Show for specific user
last -F             # Show login/logout times

ps
--
ps
ps -a
ps -ef        # Full formatted list

# Filter by user or command
ps -ef | grep -i "ec2-user"
ps -ef | grep -i "jenkins"

SSH Login with .pem Key (Public Key Auth)
==========================================
 Steps to Enable Key-based Login for a New User (e.g., devuser)
 sudo mkdir /home/devuser/.ssh
sudo cp /home/ec2-user/.ssh/authorized_keys /home/devuser/.ssh/
sudo chown -R devuser:devuser /home/devuser/.ssh
sudo chmod 700 /home/devuser/.ssh
sudo chmod 600 /home/devuser/.ssh/authorized_keys

SSH from Local:

ssh -i "your-key.pem" devuser@your-ec2-public-ip

Check User's Group Membership
=============================
id kkfunda          # Shows UID, GID, and group membership
groups kkfunda      # Lists all groups the user belongs to

System Info Commands
====================
lscpu                 # Display CPU architecture info
lshw                  # Show detailed hardware info (needs root)

🔌 Shutdown and Memory Watch
============================
sudo shutdown now     # Shutdown system immediately
watch -d free -h      # Monitor memory usage live with highlight

free
=====

The free command in Linux is used to display information about the system's memory usage. It provides details about total memory, used memory, free memory, and memory used by buffers/cache, which can help you monitor how your system's RAM is being utilized.

Useful options for the free command:

free -h: Displays the memory in a human-readable format (e.g., GB, MB).
free -m: Shows the memory in megabytes.
free -g: Shows the memory in gigabytes.
free -s <seconds>: Repeats the output every <seconds>.
free -t: Shows the total memory (including swap).



AWK command
============
 
-> awk '{print}' table.txt  —-> display the complete data. 
-> awk '/manager/ {print}' table.txt  —> manger matches.
-> awk '{print $0}' table.txt  → Display the complete data.
→  awk '{print $1,$4}' table.txt

→ awk '{print NR,$1,$4}' table.txt   --> NR means row number

→ awk '{print NR,$1,$NF}' table.txt  → NF means last field 
—> awk 'NR==3, NR==6 {print NR,$0}' table.txt   --> row 3 to 6
→ awk '{print $1,"----->",$4}' table.txt

-> awk '$3 > 50 {print $1, $2}' table.txt

-> awk 'NR >= 10 && NR <= 20' file.txt --> This will print lines 10 to 20 from file.txt

-> awk '{print $1, $2 * $3}' file.txt


awk command use cases
======================

1. Log File Analysis
--------------------
system administrators often use awk to analyze log files (e.g., Apache logs, system logs) for errors or performance metrics.

Example: Find the number of error entries in an Apache log:


awk '$9 >= 400 {print $0}' access.log

This command looks for HTTP status codes greater than or equal to 400 (indicating errors like 404 or 500) and prints the log entries with errors.

2. User Data Extraction
-----------------------

who -u | awk '{print $1, $3, $4}'

This extracts the username, login date, and login time for users currently logged in.


3. Server Log Parsing (Parsing and Filtering Logs)
--------------------------------------------------

awk '$1 == "192.168.1.100" {print $0}' access.log

ex:
192.168.1.1 - - [01/Feb/2025:12:34:56 +0000] "GET /index.html HTTP/1.1" 200 2345 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
192.168.1.1 - - [01/Feb/2025:12:34:56 +0000] "GET /index.html HTTP/1.1" 200 2345 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"

192.168.1.100 - - [01/Feb/2025:12:34:56 +0000] "GET /index.html HTTP/1.1" 200 2345 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"

192.168.1.1 - - [01/Feb/2025:12:34:56 +0000] "GET /index.html HTTP/1.1" 200 2345 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"

192.168.1.1 - - [01/Feb/2025:12:34:56 +0000] "GET /index.html HTTP/1.1" 200 2345 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"



This filters log entries for requests coming from IP address 192.168.1.100.


4. Monitoring Disk Usage
------------------------

df -h | awk '{gsub("%", "", $5); if ($5+0 > 18) print $1, $5 "%"}'



This prints all filesystems that are over 90% full, which is useful for system monitoring and alerting.

















wget
====

The wget command in Linux is a widely used tool for downloading files from the web. It supports downloading via HTTP, HTTPS, and FTP protocols, and it can handle things like resuming interrupted downloads or downloading multiple files at once.


Ex: wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz





cron tab: scheduling tasks
===========================


syntax:
-------

* * * * * /path/to/command
- - - - -
| | | | |  
| | | | +---- Day of the week (0 - 6) (Sunday = 0)
| | | +------ Month (1 - 12)
| | +-------- Day of the month (1 - 31)
| +---------- Hour (0 - 23)
+------------ Minute (0 - 59)



→ Crontab is available for all the users.
crontab -l  : How many jobs are currently configure.
crontab -e  —>edit the crontab
crontab -r  —> remove the crontab
#crontab -l -u kkfunda  → to see other users crontab, only root user can run this.

$sudo touch /etc/cron.allow  —> remove cron access to normal user.
#sudo vi /etc/cron.allow  —> add user here.

vi hello.sh

echo “welcome to KK FUNDA”
echo “today date is:”
date
uptime

How to run the shell script?

sh hello.sh  —-> It will run
./hello.sh    —--> don't have exec permissions → chmod u+x hello.sh

*/1 * * * * /home/ec2-user/hello.sh  >> /home/ec2-user/hello.log



crontab -e —-> paste that command
crontab -l
NOTE: we dont want to loose the previous o/p[ >> ]  → append the standard o/p.
